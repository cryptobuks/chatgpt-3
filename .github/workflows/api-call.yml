# This is a GitHub action workflow that uses curl to call OpenAI API
# and generate a speaking script from an input in a local text file
# and show the script in the next step

name: Fake Video Generator

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PROMPT_GPT_JSON: chatgpt_pmt2.json
  SPEAKING_SCRIPT_FILE: chatgpt-speak-script.txt
    # Add "id-token" with the intended permissions.

jobs:
  chatgpt:
    runs-on: ubuntu-latest

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'
          
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Show Prompt
        run: |
          cat $PROMPT_GPT_JSON | jq '.messages[0].content'

      # Call ChatGPT API to generate a speaking script from a prompt
      - name: Call chatgpt API
        id: chatgpt
        run: |
          # RESPONSE_GPT=$(curl --location --insecure --request POST 'https://api.openai.com/v1/chat/completions' \
          #   --header "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
          #   --header 'Content-Type: application/json' \
          #   -d @$PROMPT_GPT_JSON)

          # echo "response_full: $RESPONSE_GPT"
          
          # export RESPONSE_ANSWER=$(echo $RESPONSE_GPT | jq '.choices[0].message.content')
          export RESPONSE_ANSWER='This is a text file'
          echo "response=$RESPONSE_ANSWER" >> $GITHUB_OUTPUT
          echo $RESPONSE_ANSWER > $SPEAKING_SCRIPT_FILE

      - name: Show speaking script
        run: |
          echo "Response as below"
          echo ${{ steps.chatgpt.outputs.response }}
          echo "FILE_NAME: $SPEAKING_SCRIPT_FILE"
          echo "Current Folder: $(pwd)"
          ls -al 


      # Configure Workload Identity Federation and generate an access token.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token' # <--
          workload_identity_provider: 'projects/427123092057/locations/global/workloadIdentityPools/github-pool/providers/github-provider'
          service_account: 'gcs-read-write@sada-jmy-demo.iam.gserviceaccount.com'
          access_token_lifetime: '300s' # optional, default: '3600s' (1 hour)

      # Upload file to gcs storage 
      - name : Upload file 
        uses : google-github-actions/upload-cloud-storage@v1.0.0
        with :
          path : /home/runner/work/chatgpt/chatgpt
          destination : "chatgpt-output"
          glob: chatgpt-speak-script.txt
              
      # Now you can run gcloud commands authenticated as the impersonated service account.
      - id: 'gcloud'
        name: 'gcloud'
        run: |-
          gsutil cat gs://chatgpt-output/chatgpt-speak-script.txt

          


      # # Call Image AI API to generate a picture of a person from a prompt, the endpint is fake: api.imageai.com
      # # Unfortunately, the official statement from Midjourney still is that they currently have no plans for an API in the near future.
      # - name: Generate image
      #   uses: actions/http-client@v1.0.9
      #   id: image
      #   with:
      #     url: https://api.imageai.com/generate?prompt=A%20young%20woman%20with%20brown%20hair%20and%20blue%20eyes.
      #     method: GET
      
      # # Call Video AI API to let the above person speak out that script from a prompt, the endpint is fake: api.videoai.com 
      # - name: Generate video 
      #   uses: actions/http-client@v1.0.9 
      #   id: video 
      #   with:
      #     url: https://api.videoai.com/generate?image=${{steps.image.outputs.content}}&script=${{steps.script.outputs.content}}
      #     method: GET
      
      # # Save the video file to gcs storage 
      # - name : Save video 
      #   uses : google-github-actions/upload-cloud-storage@main 
      #   with :
      #     path : ${{steps.video.outputs.content}}
      #     destination : gs://my-bucket/fake-video.mp4
      
      # # Generate a temporary link with a temporary password that user can download by entering right password 
      # - name : Generate link 
      #   uses : google-github-actions/get-gcs-objects@main 
      #   id : link 
      #   with :
      #     bucket : my-bucket 
      #     prefix : fake-video.mp4 
      #     expires_in : 3600s
      
      # # Print out the link and password for user convenience (optional)  
      # - name : Print link and password  
      #   run : echo "The link for downloading your video is ${{steps.link.outputs.signed_url}} and the password is 'secret'."    
