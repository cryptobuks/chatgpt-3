# This is a GitHub action workflow that uses curl to call OpenAI API
# and generate a speaking script from an input in a local text file
# and show the script in the next step

name: Fake Video Generator

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PROMPT_GPT_JSON: chatgpt_pmt2.json
  SPEAKING_SCRIPT_FILE: chatgpt-speak-script.txt
  OUTPUT_GCS: gs://chatgpt-output
  PROMPT_VOICE_JSON: gcp-voice.json
  SPEAKING_AUDIO_RAW_FILE: gcp-voice-raw.txt
  SPEAKING_AUDIO_MP3: gcp-voice-output.mp3
  PROMPT_D_ID_VOICE_JSON: d-id-voice.json
  PROMPT_D_ID_CLIP_JSON: d-id-clip.json

jobs:
  chatgpt:
    runs-on: ubuntu-latest

    # Add "id-token" with the intended permissions.
    permissions:
      contents: 'read'
      id-token: 'write'
          
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Show Prompt
        run: |
          cat $PROMPT_GPT_JSON | jq '.messages[0].content'

      # Call ChatGPT API to generate a speaking script from a prompt
      - name: Call chatgpt API
        id: chatgpt
        run: |
          curl --location --insecure --request POST 'https://api.openai.com/v1/chat/completions' \
            --header "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            --header 'Content-Type: application/json' \
            -d @$PROMPT_GPT_JSON > resp-gpt.json

          # echo "response_full:" 
          # cat resp-gpt.json

          export RESPONSE_ANSWER=$(cat resp-gpt.json | jq -r '.choices[0].message.content')
          # export RESPONSE_ANSWER='This is a text file'
          # echo "response_script=$RESPONSE_ANSWER" >> $GITHUB_OUTPUT
          echo "Resp answer"
          echo $RESPONSE_ANSWER
          echo $RESPONSE_ANSWER > $SPEAKING_SCRIPT_FILE
        
      - name: Update gcp voice input json
        run: |
          # cat ${PROMPT_VOICE_JSON} | jq '.input.text'
          export SPEAKING_SCRIPT=$(cat $SPEAKING_SCRIPT_FILE)
          jq --arg newkey "${SPEAKING_SCRIPT}" '.input.text = $newkey' ${PROMPT_VOICE_JSON} > tmp-file.json
          mv tmp-file.json ${PROMPT_VOICE_JSON}

          echo 'Done json update'
          cat ${PROMPT_VOICE_JSON} | jq .

      # Configure Workload Identity Federation and generate an access token.
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          token_format: 'access_token' # <--
          workload_identity_provider: "${{ secrets.GH_GCP_WORKLOAD_IDENTITY_PROVIDER }}"
          service_account: "${{ secrets.GH_GCP_SERVICE_ACCOUNT }}"
          access_token_lifetime: '300s' # optional, default: '3600s' (1 hour)

      # Generate audio Guide: https://cloud.google.com/text-to-speech/docs/create-audio-text-command-line
      - name: Call GOOGLE text-to-speech API
        id: text_to_speech
        run: |
          curl -X POST \
          -H "Authorization: Bearer $(gcloud auth application-default print-access-token)" \
          -H "Content-Type: application/json; charset=utf-8" \
          -d @${PROMPT_VOICE_JSON} \
          "https://texttospeech.googleapis.com/v1/text:synthesize" > resp-full-gcp-audio.json

          export RESPONSE_GCP_AUDIO_RAW=$(cat resp-full-gcp-audio.json | jq -r '.audioContent')
          # export RESPONSE_GCP_AUDIO_RAW='This is a text file'
          # echo "response_voice=$RESPONSE_GCP_AUDIO_RAW" >> $GITHUB_OUTPUT
          echo $RESPONSE_GCP_AUDIO_RAW > $SPEAKING_AUDIO_RAW_FILE

      - name: Generate speaking audio
        run: |
          # cat $SPEAKING_AUDIO_RAW_FILE
          # ls -al $SPEAKING_AUDIO_RAW_FILE
          # echo "Current Folder: $(pwd)"
          base64 -d $SPEAKING_AUDIO_RAW_FILE > $SPEAKING_AUDIO_MP3


      # Install gcloud, `setup-gcloud` automatically picks up authentication from `auth`.
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      # Upload file to gcs storage 
      - name : Upload file 
        run: |
          gsutil cp $SPEAKING_SCRIPT_FILE $OUTPUT_GCS
          gsutil cp $SPEAKING_AUDIO_RAW_FILE $OUTPUT_GCS
          gsutil cp $SPEAKING_AUDIO_MP3 $OUTPUT_GCS
              
      # Now you can run gcloud commands authenticated as the impersonated service account.
      - id: 'gcloud'
        name: 'Check File from the Storage'
        run: |-
          gsutil cat $OUTPUT_GCS/$SPEAKING_SCRIPT_FILE
          echo "audio file: $OUTPUT_GCS/$SPEAKING_AUDIO_MP3"


      # # Call Image AI API to generate a picture of a person from a prompt, the endpint is fake: api.imageai.com
      # # Unfortunately, the official statement from Midjourney still is that they currently have no plans for an API in the near future.
      # - name: Generate image
      #   uses: actions/http-client@v1.0.9
      #   id: image
      #   with:
      #     url: https://api.imageai.com/generate?prompt=A%20young%20woman%20with%20brown%20hair%20and%20blue%20eyes.
      #     method: GET
      
      # # Call Studio.d-id API to generate a talk speaking the above script
      # I paid the Lite plan on https://studio.d-id.com which can generate audio and animation, but not allowed to generate video clips, which is on Premium plan

      - name: Update D-ID voice input json
        run: |
          # cat ${PROMPT_D_ID_VOICE_JSON} | jq '.input.text'
          export SPEAKING_SCRIPT=$(cat $SPEAKING_SCRIPT_FILE)
          jq --arg newkey "${SPEAKING_SCRIPT}" '.input.text = $newkey' ${PROMPT_D_ID_VOICE_JSON} > tmp-file.json
          mv tmp-file.json ${PROMPT_D_ID_VOICE_JSON}

          echo 'Done json update'
          cat ${PROMPT_D_ID_VOICE_JSON} | jq .

      - name: Generate D_ID voice talk 
        run: |
          curl --request POST \
            --url https://api.d-id.com/talks \
            --header 'accept: application/json' \
            --header "authorization: Bearer ${{ secrets.D_ID_API_KEY }}" \
            --header 'content-type: application/json' \
            --data @${PROMPT_D_ID_VOICE_JSON}
 
      - name: Update D-ID video input json
        run: |
          # cat ${PROMPT_D_ID_CLIP_JSON} | jq '.input.text'
          export SPEAKING_SCRIPT=$(cat $SPEAKING_SCRIPT_FILE)
          jq --arg newkey "${SPEAKING_SCRIPT}" '.input.text = $newkey' ${PROMPT_D_ID_CLIP_JSON} > tmp-file.json
          mv tmp-file.json ${PROMPT_D_ID_CLIP_JSON}

          echo 'Done json update'
          cat ${PROMPT_D_ID_CLIP_JSON} | jq .

      # # Call Video AI API to let the above person speak out that script from a prompt
      # I paid the Lite plan on https://studio.d-id.com which can generate audio and animation, but not allowed to generate video clips, which is on Premium plan
      # - name: Generate video 
      #     curl --request POST \
      #       --url https://api.d-id.com/clips \
      #       --header 'accept: application/json' \
      #       --header "authorization: Bearer ${{ secret.D_ID_API_KEY }}" \
      #       --header 'content-type: application/json' \
      #       --data @${PROMPT_D_ID_CLIP_JSON}

      
      # # Save the video file to gcs storage 
      # - name : Save video 
      #   uses : google-github-actions/upload-cloud-storage@main 
      #   with :
      #     path : ${{steps.video.outputs.content}}
      #     destination : gs://my-bucket/fake-video.mp4
      
      # # Generate a temporary link with a temporary password that user can download by entering right password 
      # - name : Generate link 
      #   uses : google-github-actions/get-gcs-objects@main 
      #   id : link 
      #   with :
      #     bucket : my-bucket 
      #     prefix : fake-video.mp4 
      #     expires_in : 3600s
      
      # # Print out the link and password for user convenience (optional)  
      # - name : Print link and password  
      #   run : echo "The link for downloading your video is ${{steps.link.outputs.signed_url}} and the password is 'secret'."    
