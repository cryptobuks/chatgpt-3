Presenter-B:  We start, well, if key concepts, you know why? And you know, what VPC service controls are any special gut just when working with them, and I'll also do a demo or actually two of the demos if I have time. So VPC, Service controls, it's a service from Google. That doesn't really have much to do with VPC, but has a lot to do with the controls around, Google Services and APIs. You know, Google Services are basically any service that you use through Google Console or through Terraform or through the Google SDK or even the G Cloud command. all of these tools basically talk to
00:35:00
Presenter-B:  Talk to a Google APS on the back end. And you know, they let you interact through a unify API with your cloud resources. Vpc, service controls. Give you ability to secure access to Google Cloud services. For example, are you know any services, such as storage services like Google Storage or Bigquery Compute, Engine gke, anything you'll use in GCP for the most part can be secured using VPC, service controls. There is a couple of considerations for various services. Google has a really big page about like every single service and it any issues with VPC service controls and you got us. I'll paste the link to that.
Presenter-B:  A website at the end of this presentation. But basically, you can use that as a reference to see whether the services protected or supported by VPC service controls. And if there are any issues, if you do protect that service in VPC service controls, Obviously in GCP, you can use Google im to control access to Google Services Service controls on another hand. Give you another way to control access to those APIs and the data that's stored behind them. For example, with VPC, service controls, you can deny users within the cervix perimeter. You can stop them from copying data from inside of the perimeter to outside of a perimeter. A good use case is for example, in case you have some PII data on a GCS bucket and you want to stop your users from being able to copy that data.
Presenter-B:  To a third party bucket outside of the perimeter. So basically this lets you protect your resources and your data you do this by creating a service parameter where you specify your projects and vpcs and which services are going to be protected in those perimeters. It's an opt-in service where you specify, which services, you want to protect and secure in case you want to protect all the services, you have to select all of them. But in a nutshell, they give you access to control. And limit who can access and where they can do it from. You know, in contrast to I AM or identity and access management, I am as an identity based access control system where as VPC service controls are context-based access control.
Presenter-B:  So if I am, you know, you have your identities, you know, service account, or my user email address is an identity with. I am, I can grant permissions to specific services to that identity. In contrast, the VPC service controls. I can control where the access can come from and where it can go to. So basically in a nutshell VPC, service controls is an API gateway to Google, APIs. That gives you an additional layer of protection above im
Presenter-B:  Okay. What benefits do I get out of this? Well, first off, we get, we avoid data exfiltration. We can disable copying or protected data to outside GCS Buckets, you know, let's say, you have a service account that is being used by Compute, instance, in your project. Are you can basically, deny any service account from copying data to third-party buckets outside of your service perimeter. And with that in mind, you can also use it to Stop stolen, JSON keys from being used outside of an authorized networks outside of a perimeter.
Presenter-B:  So basically, I'd say, you know, you somebody steals your service accounts, Jason Key and tries to use it on their workstation outside of the perimeter. Well, they're gonna get this message that says, Hey, you know, request is prohibited by your organizations policy, you know, you can't do this.
Presenter-B: In addition to that you can use access levels to permit access from outside networks. For example, let's say, you know you want to allow access to a terraform service account from a specified outside cider range. That's entirely possible that way. You can ensure that your engineers use terraform, you know, using service accounts only from their workstations and not from anywhere else in the world. If you throw a little bit of money at Google, you also get access to beyond Core Enterprise, which will give you, MD Light, MDMA MDM like controls to GCP, where you can add additional controls, like GEO IP, you know, location blocking as well as, you know, Device. Blocking access controls to your access levels.
00:40:00
Presenter-B:  Additionally, you can prevent misconfigured over early permissive ion policies. You know, let's say you have an IAM policy that somebody messes up and they give you way too much access. Well, with VPC service controls. We can ensure that that access has a second check, you know, to ensure. I mean you're not doing what you're not supposed to be doing. Um Additionally, you get access context context aware rules where you can specify what identities and identity types and access your Google APIs. And you also get to do some monitoring where you can view in your lot, you know, Cloud blogging, what? Service accounts, try to access. What Protectedly, yeah, and you know where they got tonight?
Presenter-B:  Thank you. Okay. None key concepts. The first key concept is perimeters. That's where you specify your projects and BPC networks and APIs. Our perimeters can be dry, run or enforced, dry. Run is basically where excesses permitted, but it's still lugged according to your policy and force, is where we do actually actual like, protection of the services. There are two types of perimeters as well. I regular perimeter and a bridge perimeter, bridge perimeters are used when you want to connect multiple parameters together and allow access between them.
Presenter-B: Brush primers are actually not really recommended to be used anymore. Bulks actually recommend using ingress in ingress policies and rules to permit data movement between perimeters.
Miguel Izaga: Up.
Presenter-B: ah, the reason for that is with bridges, you basically allow All the resources in the perimeter to be accessible by another perimeter. With ingress and egress policies. You basically specify granular controls of who can access, you know your APIs. Access levels are basically an ability are a concept where you can allow external external resources access to your perimeter. So with that, you can specify service accounts. You know, your cloud email, addresses. external public iPS Like, you know, an IP of your workstation or your, you know, Net IP that you're accessing from the outside,
Presenter-B:  Audit and logging, that's pretty standard it all happens. Within cloud logging. There's a special resource. You just got to look up. They'll show you, you know, your recent blocks and denies. Ingress and Egress Rule. They're basically a granular way to permit access into your perimeter and permit access out of your perimeter. Ingress rules are going to be helpful when you want to permit someone from outside of your organization.
Presenter-B: Or even even within your organization access from outside of the perimeter, you know, for example, let's say I protect GCs in the perimeter. Nobody outside of my project or outside of, this perimeter will be able to access GCS, unless, you know, I had their IP address to the excess list or access level. and to the in ingress rule, With those rules. You can also specify identities other projects that can get in other VPC networks that can get in an accessory APIs. Are egress, rules refer to any excess that involves an API client or resource within the parameter and resources outside. Our service perimeter. examples include A cloud storage client within your perimeter that wants to copy data from a protected bucket. To a bucket outside of your perimeter.
Presenter-B:  so, that way you can control Data equals from GCS and ensure that. It's allowed to only permit it resources outside of a perimeter, definitely a very good way to just protect your, you know, PII data in your buckets and disallow any outside copies.
Presenter-B: Egress and ingress rules can be written in JSON yml. As well as through the Cloud console in Terraform Terraform has a specific language called HCl Hashicorp Whatever language that's used to write Tera from recipes and configurations. They have a couple of gotchas where you know it looks kind of like JSON when you write your policies but they don't use Collins. They use.
00:45:00
Presenter-B:  Equal signs for values in assigning values. So it's just one of the gut just to look for when you're writing your policies. But an example policy looks fairly simple from English rules you specify? You can specify what identity types can access it whether it's users or service accounts, what identities you can actually that can actually access that API from outside and what sources we can use. So as a resource, you can specify another project or another VPC network outside of your perimeter or an access level. an ingress to role is basically specified, what services, you're allowing your
Presenter-B:  Identities to access and what permissions they have. So you can specify you know, Google's cloud storage. You have so many different methods that users can do like Get Post list. All these restful methods are basically used by the Cloud console or Gcloud or Gsutile to interface with cloud storage so we can control which methods we can do. same thing with egress rules, you can specify who Can. Basically move data outside of your perimeter, you specify what identities, what service accounts and word that data can go.
Presenter-B:  Special Considerations, When Engineering. Think about what Google services in APIs that you want to protect and why you want to protect them think really hard. Why you want to do this. You know what use cases, you have to protect your data. Why do you want to protect it? Is there any data that you want to prevent from being Extilated? What if there is level? Who are you protecting it? From what exceptions you have? Things like that, you know, think about really what you're protecting and why you're protecting, you know, if you're going to secure Google Cloud storage. Think about why you're going to protect it. Is there specific type of data that you want protected and not? Be able to be, you know, uploaded anywhere else. Next up, when designing perimeters, make the resource organization, hierarchy, work for you, especially when you're deploying your immersive using terraform.
Presenter-B:  When you create a perimeter, you specify, what service is you want to protect as well as the projects and dpcs that you'll allow access to those? Services from You know, when using TERRAFORM, oftentimes you'll find yourself using data sources or variables or string variables to pests resource IDs, like projects or VPC networks. You know, depending how you Design Your Organization Hierarchy. Sometimes it may make sense to use a data source to automatically pull all the projects from a folder to protect versus. Specifying them manually by hand using, you know, strings. Depending, how you design your organization, hierarchy, it may make it easier for you to filter through the data sources and, you know, pull all the project numbers from folders. And I'll show you guys later more. You know what I'm talking about in my terraform code?
